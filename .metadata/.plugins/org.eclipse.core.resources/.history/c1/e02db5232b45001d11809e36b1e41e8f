package kr.co.ezen.main;


import org.springframework.context.support.ClassPathXmlApplicationContext;

import kr.co.ezen.beans.TestBean3;
import kr.co.ezen.beans.TestBean4;


/* BeanPostProcessor
 * --------------------------------------------------------------------------------------------------
 * - Bean 객체를 정의할 때 init-method 속성을 설정하면 객체가 생성될때 자동으로 호출될 메소드를 지정할 수 있습니다.
 * - 이때, BeanPostProcessor 인터페이스를 구현한 클래스를 정의하면 Bean 객체를 생성 할 때
 * 	 호출되는 init 메소드 호출을 가로채어 다른 메소드를 호출 할 수 있습니다.
 * - postProcessBeforInitialization : init-method에 지정된 메소드가 호출되기 전에 호출합니다.
 * - postProcessAfterInitialization : init-method에 지정된 메소드가 호출된 다음에 호출합니다.
 * - init-method가 지정되어 있지 않더라도 자동으로 호출합니다.
 */

public class mainClass {

	public static void main(String[] args) {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("kr/co/ezen/config/beans.xml");
		
		TestBean3 t3 = context.getBean("tb3", TestBean3.class);
		System.out.println("t3 : " + t3);
		
		TestBean3 t7 = context.getBean("tb3", TestBean3.class);
		double result7 = t7.Adder(300, 200);
		System.out.println("덧셈의 합계7 : " + result7);//500.0
		System.out.println(t7);
		
		TestBean3 t8 = context.getBean("tb3", TestBean3.class);
		double result8 = t8.multi(300, 200);
		System.out.println("덧셈의 합계8 : " + result8);//60000.0
		System.out.println(t8);
		
		TestBean3 t9 = context.getBean("tb3", TestBean3.class);
		double result9 = t9.divi(300.0, 12.0);
		System.out.println("덧셈의 합계9 : " + result9);//25.0
		System.out.println(t9);
		System.out.println("======================================================================================");
		
		TestBean4 t10 = context.getBean("tb4", TestBean4.class);
		System.out.println("t10 : " + t10);
		
		context.close();
	}


}
